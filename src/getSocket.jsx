import { io } from "socket.io-client";
import { jwtDecode } from "jwt-decode";
import { refreshAccessToken } from "./redux/slices/refreshTokenSlice"; // —Ç–≤–æ–π
import { useDispatch } from "react-redux";

export const connectSocket = async (dispatch) => {
  let token = localStorage.getItem("token");

  // ‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç—ë–∫ –ª–∏
  if (token) {
    try {
      const decoded = jwtDecode(token);
      const now = Date.now() / 1000;

      if (decoded.exp < now) {
        console.log("üîÅ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–ª—è–µ–º...");

        const action = await dispatch(refreshAccessToken());

        if (refreshAccessToken.fulfilled.match(action)) {
          console.log("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –ø–µ—Ä–µ–¥ —Å–æ–∫–µ—Ç–æ–º");
          token = localStorage.getItem("token");
        } else {
          console.log("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∫–µ—Ç–æ–º");
          return;
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞", err);
      return;
    }
  } else {
    console.warn("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ localStorage");
    return;
  }

  // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
  const socket = io('wss://game-socket-4.onrender.com',{//"http://localhost:5000", {
    auth: {
      token: token,
    },
    transports: ['websocket'],
  });

  socket.on("connect", () => {
    console.log("üü¢ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω");
  });

  socket.on("disconnect", () => {
    console.log("üî¥ WebSocket –æ—Ç–∫–ª—é—á—ë–Ω");
  });

  return socket;
};
